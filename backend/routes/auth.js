import express from 'express';
import { body, validationResult } from 'express-validator';
import { Utilisateur, ActivityLog, UserSession } from '../models/index.js';
import { authenticateToken, generateToken } from '../middleware/auth.js';
import emailService from '../services/emailService.js';
import { captureUserSession } from '../utils/sessionCapture.js';
import passport from 'passport';
import { v4 as uuidv4 } from 'uuid';
import rateLimit from 'express-rate-limit';
import { Op } from 'sequelize';
import { deleteCloudinaryFile } from '../utils/cloudinaryStructure.js';
import { validateEmail } from '../services/emailDomainValidator.js';
import NotificationService from '../services/notificationService.js';
import SecurityMonitor from '../middleware/securityMonitor.js';

const router = express.Router();

// Rate limiting pour les demandes de r√©initialisation
const forgotPasswordLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 3, // Maximum 3 tentatives par IP
  message: {
    error: 'Trop de demandes de r√©initialisation. R√©essayez dans 15 minutes.'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Fonction de validation de mot de passe fort
const validateStrongPassword = (password) => {
  const criteria = {
    length: password.length >= 8,
    uppercase: /[A-Z]/.test(password),
    lowercase: /[a-z]/.test(password),
    number: /[0-9]/.test(password),
    special: /[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password)
  };
  
  return Object.values(criteria).every(Boolean);
};

// Validation pour l'inscription
const registerValidation = [
  body('username')
    .trim()
    .isLength({ min: 3, max: 100 })
    .withMessage('Le nom d\'utilisateur doit contenir entre 3 et 100 caract√®res'),
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email invalide'),
  body('password')
    .isLength({ min: 8 })
    .withMessage('Le mot de passe doit contenir au moins 8 caract√®res')
    .custom((password) => {
      if (!validateStrongPassword(password)) {
        const missing = [];
        if (!/[A-Z]/.test(password)) missing.push('1 majuscule');
        if (!/[a-z]/.test(password)) missing.push('1 minuscule');
        if (!/[0-9]/.test(password)) missing.push('1 chiffre');
        if (!/[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password)) missing.push('1 caract√®re sp√©cial');
        throw new Error(`Mot de passe trop faible. Manque: ${missing.join(', ')}`);
      }
      return true;
    })
];

// Validation pour la connexion
const loginValidation = [
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email invalide'),
  body('password')
    .notEmpty()
    .withMessage('Mot de passe requis')
];

// Route d'inscription
router.post('/register', registerValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Donn√©es invalides',
        details: errors.array()
      });
    }

    const { username, email, password } = req.body;

    // Validation du domaine email
    console.log(`üîç [REGISTER] Tentative d'inscription avec email: ${email} depuis IP: ${req.ip}`);
    try {
      await validateEmail(email, req.ip, req.get('User-Agent'), 'register');
      console.log(`‚úÖ [REGISTER] Email ${email} autoris√©`);
    } catch (domainError) {
      console.log(`‚ùå [REGISTER] Email ${email} refus√©: ${domainError.message}`);
      return res.status(400).json({
        error: domainError.message
      });
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await Utilisateur.findOne({ where: { email } });
    if (existingUser) {
      return res.status(409).json({
        error: 'Un compte avec cet email existe d√©j√†'
      });
    }

    // Cr√©er l'utilisateur
    const user = await Utilisateur.create({
      username,
      email,
      password
    });

    // üîî Notifier les admins du nouvel utilisateur
    await NotificationService.notifyNewUserRegistration(user);

    // G√©n√©rer le token
    const token = generateToken(user.id);

    res.status(201).json({
      message: 'Compte cr√©√© avec succ√®s',
      user: user.toJSON(),
      token
    });

  } catch (error) {
    console.error('Erreur inscription:', error);
    res.status(500).json({
      error: 'Erreur lors de la cr√©ation du compte'
    });
  }
});

// Route de connexion
router.post('/login', SecurityMonitor.trackFailedLogin, loginValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Donn√©es invalides',
        details: errors.array()
      });
    }

    const { email, password } = req.body;

    // Trouver l'utilisateur
    const user = await Utilisateur.findOne({ where: { email } });
    if (!user) {
      return res.status(401).json({
        error: 'Email ou mot de passe incorrect'
      });
    }

    // V√©rifier le mot de passe
    const isValidPassword = await user.validatePassword(password);
    if (!isValidPassword) {
      return res.status(401).json({
        error: 'Email ou mot de passe incorrect'
      });
    }

    // V√©rifier si le compte est marqu√© pour suppression
    if (user.isMarkedForDeletion()) {
      const daysRemaining = user.getDaysUntilDeletion();
      return res.status(403).json({
        error: 'Compte en p√©riode de gr√¢ce',
        message: `Votre compte est marqu√© pour suppression dans ${daysRemaining} jour${daysRemaining > 1 ? 's' : ''}. Utilisez le lien de r√©cup√©ration dans votre email pour r√©activer votre compte.`,
        daysRemaining,
        deletionScheduledAt: user.deletion_scheduled_at,
        isMarkedForDeletion: true
      });
    }

    // Capturer la session utilisateur lors de la connexion
    await captureUserSession(req, user);

    // G√©n√©rer le token
    const token = generateToken(user.id);

    res.json({
      message: 'Connexion r√©ussie',
      user: user.toJSON(),
      token
    });

  } catch (error) {
    console.error('Erreur connexion:', error);
    res.status(500).json({
      error: 'Erreur lors de la connexion'
    });
  }
});

// Route pour obtenir le profil utilisateur
router.get('/profile', authenticateToken, async (req, res) => {
  try {
    res.json({
      user: req.user.toJSON()
    });
  } catch (error) {
    console.error('Erreur profil:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration du profil'
    });
  }
});

// Route pour mettre √† jour le profil
router.put('/profile', authenticateToken, [
  body('username')
    .optional()
    .trim()
    .isLength({ min: 3, max: 100 })
    .withMessage('Le nom d\'utilisateur doit contenir entre 3 et 100 caract√®res')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Donn√©es invalides',
        details: errors.array()
      });
    }

    const { username } = req.body;
    
    if (username) {
      await req.user.update({ username });
    }

    res.json({
      message: 'Profil mis √† jour avec succ√®s',
      user: req.user.toJSON()
    });

  } catch (error) {
    console.error('Erreur mise √† jour profil:', error);
    res.status(500).json({
      error: 'Erreur lors de la mise √† jour du profil'
    });
  }
});

// Validation pour la demande de r√©initialisation
const forgotPasswordValidation = [
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('Email invalide')
];

// Validation pour la r√©initialisation
const resetPasswordValidation = [
  body('token')
    .notEmpty()
    .withMessage('Token requis'),
  body('password')
    .isLength({ min: 8 })
    .withMessage('Le mot de passe doit contenir au moins 8 caract√®res')
    .custom((password) => {
      if (!validateStrongPassword(password)) {
        const missing = [];
        if (!/[A-Z]/.test(password)) missing.push('1 majuscule');
        if (!/[a-z]/.test(password)) missing.push('1 minuscule');
        if (!/[0-9]/.test(password)) missing.push('1 chiffre');
        if (!/[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password)) missing.push('1 caract√®re sp√©cial');
        throw new Error(`Mot de passe trop faible. Manque: ${missing.join(', ')}`);
      }
      return true;
    })
];

// Route pour demander la r√©initialisation du mot de passe
router.post('/forgot-password', forgotPasswordLimiter, forgotPasswordValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Donn√©es invalides',
        details: errors.array()
      });
    }

    const { email } = req.body;

    // Validation du domaine email
    try {
      await validateEmail(email, req.ip, req.get('User-Agent'), 'forgot-password');
    } catch (domainError) {
      return res.status(400).json({
        error: domainError.message
      });
    }

    // V√©rifier si l'utilisateur existe
    const user = await Utilisateur.findOne({ where: { email } });
    
    // Toujours retourner un succ√®s pour √©viter l'√©num√©ration d'emails
    if (!user) {
      return res.json({
        message: 'Si cet email existe dans notre syst√®me, vous recevrez un lien de r√©initialisation.'
      });
    }

    // Supprimer les anciens tokens non utilis√©s pour cet utilisateur
    await PasswordResetToken.destroy({
      where: {
        user_id: user.id,
        used: false
      }
    });

    // G√©n√©rer un nouveau token
    const resetToken = uuidv4();
    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

    // Cr√©er le token en base
    await PasswordResetToken.create({
      token: resetToken,
      email: user.email,
      user_id: user.id,
      expires_at: expiresAt
    });

    // Envoyer l'email
    await emailService.sendPasswordResetEmail(user.email, user.username, resetToken);

    res.json({
      message: 'Si cet email existe dans notre syst√®me, vous recevrez un lien de r√©initialisation.'
    });

  } catch (error) {
    console.error('Erreur forgot-password:', error);
    res.status(500).json({
      error: 'Erreur lors de la demande de r√©initialisation'
    });
  }
});

// Route pour r√©initialiser le mot de passe
router.post('/reset-password', resetPasswordValidation, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Donn√©es invalides',
        details: errors.array()
      });
    }

    const { token, password } = req.body;

    // Trouver le token
    const resetToken = await PasswordResetToken.findOne({
      where: { token }
    });

    if (!resetToken) {
      return res.status(400).json({
        error: 'Token invalide ou expir√©'
      });
    }

    // V√©rifier si le token est valide
    if (!resetToken.isValid()) {
      return res.status(400).json({
        error: 'Token invalide ou expir√©'
      });
    }

    // Trouver l'utilisateur
    const user = await Utilisateur.findByPk(resetToken.user_id);
    if (!user) {
      return res.status(400).json({
        error: 'Utilisateur introuvable'
      });
    }

    // Mettre √† jour le mot de passe
    await user.update({ password });

    // Marquer le token comme utilis√©
    await resetToken.markAsUsed();

    // Supprimer tous les autres tokens de cet utilisateur
    await PasswordResetToken.destroy({
      where: {
        user_id: user.id,
        id: { [Op.ne]: resetToken.id }
      }
    });

    res.json({
      message: 'Mot de passe r√©initialis√© avec succ√®s'
    });

  } catch (error) {
    console.error('Erreur reset-password:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©initialisation du mot de passe'
    });
  }
});

// Route pour v√©rifier la validit√© d'un token
router.get('/verify-reset-token/:token', async (req, res) => {
  try {
    const { token } = req.params;

    const resetToken = await PasswordResetToken.findOne({
      where: { token }
    });

    if (!resetToken || !resetToken.isValid()) {
      return res.status(400).json({
        error: 'Token invalide ou expir√©',
        valid: false
      });
    }

    res.json({
      message: 'Token valide',
      valid: true
    });

  } catch (error) {
    console.error('Erreur verify-reset-token:', error);
    res.status(500).json({
      error: 'Erreur lors de la v√©rification du token',
      valid: false
    });
  }
});

// ========================================
// ROUTES OAUTH GOOGLE
// ========================================

// Middleware pour d√©sactiver CSP sur les routes OAuth
const disableCSP = (req, res, next) => {
  res.removeHeader('Content-Security-Policy');
  res.removeHeader('Content-Security-Policy-Report-Only');
  next();
};

// Route pour initier l'authentification Google
router.get('/google', 
  (req, res, next) => {
    // Stocker l'action (login/register) dans la session pour le callback
    req.session = req.session || {};
    req.session.oauthAction = req.query.action || 'login';
    console.log('üîç [GOOGLE AUTH] Action demand√©e:', req.session.oauthAction);
    next();
  },
  disableCSP,
  passport.authenticate('google', { 
    scope: ['profile', 'email'],
    prompt: 'select_account consent',  // Force s√©lection compte ET consentement
    accessType: 'offline'             // Force l'√©cran de consentement
  })
);

// Route de callback Google
router.get('/google/callback', 
  disableCSP,
  passport.authenticate('google', { 
    session: false,
    failureRedirect: `${process.env.FRONTEND_URL || (process.env.VERCEL ? 'https://hifadhui.site' : 'http://localhost:3000')}/login?error=google_auth_failed`
  }),
  async (req, res) => {
    try {
      // L'utilisateur est disponible dans req.user gr√¢ce √† Passport
      const user = req.user;
      const action = req.session?.oauthAction || 'login';
      const { isNewAccount, wasLinked, accountNotFound, accountMarkedForDeletion, daysRemaining, deletionScheduledAt } = user.oauthMetadata || {};
      
      console.log('‚úÖ [GOOGLE CALLBACK] Utilisateur authentifi√©:', {
        id: user.id,
        email: user.email,
        provider: user.provider,
        action: action,
        isNewAccount,
        wasLinked,
        accountNotFound
      });

      // Capturer la session utilisateur lors de la connexion
      await captureUserSession(req, user);

      // D√©terminer l'URL frontend avec fallback pour production
      const frontendUrl = process.env.FRONTEND_URL || 
                         (process.env.VERCEL ? 'https://hifadhui.site' : 'http://localhost:3000');

      // Cas sp√©cial : compte marqu√© pour suppression
      if (accountMarkedForDeletion) {
        console.log(`‚ùå [GOOGLE CALLBACK] Compte marqu√© pour suppression: ${user.email} (${daysRemaining} jours restants)`);
        const message = `Votre compte est marqu√© pour suppression dans ${daysRemaining} jour${daysRemaining > 1 ? 's' : ''}. Utilisez le lien de r√©cup√©ration dans votre email pour r√©activer votre compte.`;
        const redirectUrl = `${frontendUrl}/login?error=account_marked_for_deletion&message=${encodeURIComponent(message)}&daysRemaining=${daysRemaining}`;
        
        // Nettoyer la session
        if (req.session) {
          delete req.session.oauthAction;
        }
        
        return res.redirect(redirectUrl);
      }

      // Cas sp√©cial : compte non trouv√© lors d'une tentative de connexion
      if (accountNotFound) {
        const message = 'Ce compte Google n\'existe pas. Veuillez vous inscrire d\'abord.';
        const redirectUrl = `${frontendUrl}/register?error=account_not_found&message=${encodeURIComponent(message)}`;
        
        // Nettoyer la session
        if (req.session) {
          delete req.session.oauthAction;
        }
        
        return res.redirect(redirectUrl);
      }

      // G√©n√©rer le token JWT avec expiration de 7 jours
      const token = generateToken(user.id);

      // Pour les comptes Google, toujours rediriger vers le dashboard apr√®s authentification
      // Pas besoin de double authentification pour OAuth
      const redirectUrl = `${frontendUrl}/auth/callback?token=${token}&user=${encodeURIComponent(JSON.stringify(user.toJSON()))}&isNewAccount=${isNewAccount}&wasLinked=${wasLinked}`;
      
      console.log(`‚úÖ [GOOGLE CALLBACK] Redirection vers dashboard pour: ${user.email} (nouveau: ${isNewAccount}, li√©: ${wasLinked})`);
      
      // Nettoyer la session
      if (req.session) {
        delete req.session.oauthAction;
      }
      
      res.redirect(redirectUrl);
    } catch (error) {
      console.error('‚ùå [GOOGLE CALLBACK] Erreur:', error);
      const frontendUrl = process.env.FRONTEND_URL || 
                         (process.env.VERCEL ? 'https://hifadhui.site' : 'http://localhost:3000');
      res.redirect(`${frontendUrl}/login?error=auth_callback_failed`);
    }
  }
);

// Route pour l'authentification Google mobile/SPA (optionnelle)
router.post('/google/token', async (req, res) => {
  try {
    const { googleToken } = req.body;
    
    if (!googleToken) {
      return res.status(400).json({
        error: 'Token Google requis'
      });
    }

    // Ici vous pourriez v√©rifier le token Google c√¥t√© serveur
    // Pour l'instant, on suppose que le frontend a d√©j√† v√©rifi√© le token
    
    res.status(501).json({
      error: 'Authentification mobile Google non impl√©ment√©e. Utilisez la route /google'
    });
    
  } catch (error) {
    console.error('‚ùå [GOOGLE TOKEN] Erreur:', error);
    res.status(500).json({
      error: 'Erreur lors de l\'authentification Google'
    });
  }
});

// @route   GET /auth/export-data
// @desc    R√©cup√©rer toutes les donn√©es utilisateur pour export
// @access  Private
router.get('/export-data', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    console.log(`üì¶ [DATA EXPORT] R√©cup√©ration donn√©es utilisateur: ${userId}`);
    
    // Test simple d'abord - juste les fichiers
    const userFiles = await File.findAll({
      where: { owner_id: userId },
      attributes: ['id', 'filename', 'mimetype', 'file_url', 'size', 'date_upload']
    });
    
    console.log(`üìÅ [DATA EXPORT] Fichiers trouv√©s: ${userFiles.length}`);
    
    console.log(`‚úÖ [DATA EXPORT] Donn√©es r√©cup√©r√©es: ${userFiles.length} fichiers`);
    
    res.status(200).json({
      success: true,
      data: {
        files: userFiles,
        user: {
          id: req.user.id,
          username: req.user.username,
          email: req.user.email,
          provider: req.user.provider || 'local',
          created_at: req.user.createdAt || req.user.created_at
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå [DATA EXPORT] Erreur compl√®te:', error);
    console.error('‚ùå [DATA EXPORT] Stack:', error.stack);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration des donn√©es',
      details: error.message
    });
  }
});

// @route   DELETE /auth/delete-account
// @desc    Marquer le compte pour suppression avec p√©riode de gr√¢ce (14 jours)
// @access  Private
router.delete('/delete-account', authenticateToken, async (req, res) => {
  const transaction = await sequelize.transaction();
  
  try {
    const userId = req.user.id;
    const { password } = req.body;
    
    console.log(`‚è∞ [ACCOUNT DELETE] D√©but p√©riode de gr√¢ce pour: ${userId}`);
    
    // R√©cup√©rer l'utilisateur
    const user = await Utilisateur.findByPk(userId, { transaction });
    if (!user) {
      await transaction.rollback();
      return res.status(404).json({
        error: 'Utilisateur non trouv√©'
      });
    }

    // V√©rifier si le compte est d√©j√† marqu√© pour suppression
    if (user.isMarkedForDeletion()) {
      const daysRemaining = user.getDaysUntilDeletion();
      console.log(`‚ö†Ô∏è [ACCOUNT DELETE] Compte d√©j√† marqu√© pour suppression, r√©g√©n√©ration du token`);
      
      // R√©g√©n√©rer un nouveau token au lieu de refuser
      const gracePeriodDays = 14;
      const deletionInfo = await user.markForDeletion(gracePeriodDays);
      
      // Valider la transaction
      await transaction.commit();
      
      // Envoyer le nouvel email avec le nouveau token
      try {
        await emailService.sendAccountDeletionGraceEmail(
          user.email,
          user.username,
          deletionInfo.deletionScheduledAt,
          deletionInfo.recoveryToken,
          gracePeriodDays
        );
        console.log(`üìß [EMAIL] Nouveau email de p√©riode de gr√¢ce envoy√© √†: ${user.email}`);
      } catch (emailError) {
        console.error('‚ùå [EMAIL] Erreur envoi nouveau email p√©riode de gr√¢ce:', emailError);
      }
      
      return res.status(200).json({
        message: 'Nouveau lien de r√©cup√©ration g√©n√©r√© et envoy√© par email',
        gracePeriod: {
          days: gracePeriodDays,
          deletionScheduledAt: deletionInfo.deletionScheduledAt,
          recoveryToken: deletionInfo.recoveryToken
        },
        accountData: {
          filesCount: await File.count({ where: { owner_id: user.id } }),
          email: user.email,
          username: user.username
        },
        wasAlreadyMarked: true
      });
    }
    
    // V√©rifier le mot de passe pour les comptes locaux
    if (user.provider === 'local') {
      if (!password) {
        await transaction.rollback();
        return res.status(400).json({
          error: 'Mot de passe requis pour la suppression'
        });
      }
      
      const isValidPassword = await user.validatePassword(password);
      if (!isValidPassword) {
        await transaction.rollback();
        return res.status(401).json({
          error: 'Mot de passe incorrect'
        });
      }
    }
    
    console.log(`‚úÖ [ACCOUNT DELETE] Authentification valid√©e pour: ${user.email}`);
    
    // Compter les fichiers de l'utilisateur pour les statistiques
    const filesCount = await File.count({
      where: { owner_id: userId },
      transaction
    });
    
    console.log(`üìÅ [ACCOUNT DELETE] ${filesCount} fichier(s) trouv√©(s)`);
    
    // Marquer le compte pour suppression avec p√©riode de gr√¢ce de 14 jours
    const gracePeriodDays = 14;
    const deletionInfo = await user.markForDeletion(gracePeriodDays);
    
    console.log(`‚è∞ [GRACE PERIOD] Compte marqu√© pour suppression dans ${gracePeriodDays} jours`);
    console.log(`üìÖ [GRACE PERIOD] Suppression programm√©e le: ${deletionInfo.deletionScheduledAt}`);
    
    // Valider la transaction
    await transaction.commit();
    
    // Envoyer l'email de p√©riode de gr√¢ce
    try {
      await emailService.sendAccountDeletionGraceEmail(
        user.email,
        user.username,
        deletionInfo.deletionScheduledAt,
        deletionInfo.recoveryToken,
        gracePeriodDays
      );
      console.log(`üìß [EMAIL] Email de p√©riode de gr√¢ce envoy√© √†: ${user.email}`);
    } catch (emailError) {
      console.error('‚ùå [EMAIL] Erreur envoi email p√©riode de gr√¢ce:', emailError);
      // Ne pas faire √©chouer la demande si l'email √©choue
    }
    
    res.status(200).json({
      message: 'Compte marqu√© pour suppression avec p√©riode de gr√¢ce',
      gracePeriod: {
        days: gracePeriodDays,
        deletionScheduledAt: deletionInfo.deletionScheduledAt,
        recoveryToken: deletionInfo.recoveryToken
      },
      accountData: {
        filesCount,
        email: user.email,
        username: user.username
      }
    });
    
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå [ACCOUNT DELETE] Erreur:', error);
    res.status(500).json({
      error: 'Erreur lors de la suppression du compte',
      details: error.message
    });
  }
});

// @route   GET /auth/account-recovery/:token
// @desc    V√©rifier la validit√© d'un token de r√©cup√©ration de compte
// @access  Public
router.get('/account-recovery/:token', async (req, res) => {
  try {
    const { token } = req.params;
    
    console.log(`üîç [ACCOUNT RECOVERY] V√©rification token: ${token.substring(0, 8)}...`);
    
    // Chercher l'utilisateur par token de r√©cup√©ration
    const user = await Utilisateur.findByRecoveryToken(token);
    
    if (!user) {
      console.log(`‚ùå [ACCOUNT RECOVERY] Token invalide ou expir√©: ${token.substring(0, 8)}...`);
      return res.status(404).json({
        error: 'Token de r√©cup√©ration invalide ou expir√©',
        details: 'Ce lien de r√©cup√©ration n\'est plus valide. Il a peut-√™tre expir√© ou un nouveau lien a √©t√© g√©n√©r√©. V√©rifiez votre email le plus r√©cent.',
        valid: false
      });
    }
    
    const daysRemaining = user.getDaysUntilDeletion();
    
    console.log(`‚úÖ [ACCOUNT RECOVERY] Token valide pour: ${user.email}`);
    console.log(`‚è∞ [ACCOUNT RECOVERY] Jours restants: ${daysRemaining}`);
    
    res.status(200).json({
      valid: true,
      user: {
        email: user.email,
        username: user.username,
        deletedAt: user.deleted_at,
        deletionScheduledAt: user.deletion_scheduled_at,
        daysRemaining
      }
    });
    
  } catch (error) {
    console.error('‚ùå [ACCOUNT RECOVERY] Erreur v√©rification token:', error);
    res.status(500).json({
      error: 'Erreur lors de la v√©rification du token',
      details: error.message
    });
  }
});

// @route   POST /auth/account-recovery/:token
// @desc    R√©cup√©rer un compte marqu√© pour suppression
// @access  Public
router.post('/account-recovery/:token', async (req, res) => {
  const transaction = await sequelize.transaction();
  
  try {
    const { token } = req.params;
    
    console.log(`üîÑ [ACCOUNT RECOVERY] Tentative r√©cup√©ration avec token: ${token.substring(0, 8)}...`);
    
    // Chercher l'utilisateur par token de r√©cup√©ration
    const user = await Utilisateur.findByRecoveryToken(token);
    
    if (!user) {
      await transaction.rollback();
      console.log(`‚ùå [ACCOUNT RECOVERY] Token invalide ou expir√©: ${token.substring(0, 8)}...`);
      return res.status(404).json({
        error: 'Token de r√©cup√©ration invalide ou expir√©',
        details: 'Ce lien de r√©cup√©ration n\'est plus valide. Il a peut-√™tre expir√©, √©t√© d√©j√† utilis√©, ou un nouveau lien a √©t√© g√©n√©r√©. V√©rifiez votre email le plus r√©cent.'
      });
    }
    
    // R√©cup√©rer le compte
    await user.recoverAccount();
    
    console.log(`‚úÖ [ACCOUNT RECOVERY] Compte r√©cup√©r√© avec succ√®s: ${user.email}`);
    
    // Valider la transaction
    await transaction.commit();
    
    // Optionnel : Envoyer un email de confirmation de r√©cup√©ration
    try {
      const mailOptions = {
        from: {
          name: 'Hifadhui',
          address: process.env.SMTP_FROM || process.env.SMTP_USER
        },
        to: user.email,
        subject: 'Compte r√©cup√©r√© avec succ√®s - Hifadhui',
        text: `Bonjour ${user.username},

Votre compte Hifadhui a √©t√© r√©cup√©r√© avec succ√®s !

Votre demande de suppression a √©t√© annul√©e et votre compte est maintenant pleinement actif.

Vous pouvez vous reconnecter normalement √† votre compte.

Cordialement,
L'√©quipe Hifadhui`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #10b981;">‚úÖ Compte r√©cup√©r√© avec succ√®s !</h2>
            <p>Bonjour <strong>${user.username}</strong>,</p>
            <p>Votre compte Hifadhui a √©t√© r√©cup√©r√© avec succ√®s !</p>
            <div style="background: #f0f9ff; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
              <p><strong>‚úÖ Votre demande de suppression a √©t√© annul√©e</strong></p>
              <p><strong>‚úÖ Votre compte est maintenant pleinement actif</strong></p>
              <p><strong>‚úÖ Vous pouvez vous reconnecter normalement</strong></p>
            </div>
            <p>Cordialement,<br><strong>L'√©quipe Hifadhui</strong></p>
          </div>
        `
      };

      const result = await emailService.transporter.sendMail(mailOptions);
      console.log(`üìß [EMAIL] Email de confirmation de r√©cup√©ration envoy√© √†: ${user.email}`);
    } catch (emailError) {
      console.error('‚ùå [EMAIL] Erreur envoi email confirmation r√©cup√©ration:', emailError);
      // Ne pas faire √©chouer la r√©cup√©ration si l'email √©choue
    }
    
    res.status(200).json({
      message: 'Compte r√©cup√©r√© avec succ√®s',
      user: {
        email: user.email,
        username: user.username,
        recoveredAt: new Date()
      }
    });
    
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå [ACCOUNT RECOVERY] Erreur r√©cup√©ration:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration du compte',
      details: error.message
    });
  }
});

export default router;
